{
  "algorithm_patterns": {
    "hash_map": [
      {
        "solution_id": "lc_1_sol_1",
        "problem_id": "lc_1",
        "platform": "leetcode",
        "approach": "optimal",
        "quality": 100.0,
        "complexity": "O(n)"
      },
      {
        "solution_id": "lc_3_sol_2",
        "problem_id": "lc_3",
        "platform": "leetcode",
        "approach": "alternative",
        "quality": 97.42857142857143,
        "complexity": "O(n)"
      }
    ],
    "array": [
      {
        "solution_id": "lc_1_sol_1",
        "problem_id": "lc_1",
        "platform": "leetcode",
        "approach": "optimal",
        "quality": 100.0,
        "complexity": "O(n)"
      }
    ],
    "brute_force": [
      {
        "solution_id": "lc_1_sol_2",
        "problem_id": "lc_1",
        "platform": "leetcode",
        "approach": "brute_force",
        "quality": 86.81818181818181,
        "complexity": "O(n²)"
      }
    ],
    "nested_loops": [
      {
        "solution_id": "lc_1_sol_2",
        "problem_id": "lc_1",
        "platform": "leetcode",
        "approach": "brute_force",
        "quality": 86.81818181818181,
        "complexity": "O(n²)"
      }
    ],
    "linked_list": [
      {
        "solution_id": "lc_2_sol_1",
        "problem_id": "lc_2",
        "platform": "leetcode",
        "approach": "optimal",
        "quality": 100.0,
        "complexity": "O(max(m, n))"
      }
    ],
    "math": [
      {
        "solution_id": "lc_2_sol_1",
        "problem_id": "lc_2",
        "platform": "leetcode",
        "approach": "optimal",
        "quality": 100.0,
        "complexity": "O(max(m, n))"
      },
      {
        "solution_id": "cf_1_A_sol_1",
        "problem_id": "cf_1_A",
        "platform": "codeforces",
        "approach": "optimal",
        "quality": 100.0,
        "complexity": "O(1)"
      },
      {
        "solution_id": "cf_1_A_sol_2",
        "problem_id": "cf_1_A",
        "platform": "codeforces",
        "approach": "alternative",
        "quality": 98.0,
        "complexity": "O(1)"
      },
      {
        "solution_id": "cf_4_A_sol_1",
        "problem_id": "cf_4_A",
        "platform": "codeforces",
        "approach": "optimal",
        "quality": 98.0,
        "complexity": "O(1)"
      }
    ],
    "simulation": [
      {
        "solution_id": "lc_2_sol_1",
        "problem_id": "lc_2",
        "platform": "leetcode",
        "approach": "optimal",
        "quality": 100.0,
        "complexity": "O(max(m, n))"
      }
    ],
    "sliding_window": [
      {
        "solution_id": "lc_3_sol_1",
        "problem_id": "lc_3",
        "platform": "leetcode",
        "approach": "optimal",
        "quality": 96.33333333333333,
        "complexity": "O(n)"
      },
      {
        "solution_id": "lc_3_sol_2",
        "problem_id": "lc_3",
        "platform": "leetcode",
        "approach": "alternative",
        "quality": 97.42857142857143,
        "complexity": "O(n)"
      }
    ],
    "hash_set": [
      {
        "solution_id": "lc_3_sol_1",
        "problem_id": "lc_3",
        "platform": "leetcode",
        "approach": "optimal",
        "quality": 96.33333333333333,
        "complexity": "O(n)"
      }
    ],
    "two_pointers": [
      {
        "solution_id": "lc_3_sol_1",
        "problem_id": "lc_3",
        "platform": "leetcode",
        "approach": "optimal",
        "quality": 96.33333333333333,
        "complexity": "O(n)"
      }
    ],
    "optimization": [
      {
        "solution_id": "lc_3_sol_2",
        "problem_id": "lc_3",
        "platform": "leetcode",
        "approach": "alternative",
        "quality": 97.42857142857143,
        "complexity": "O(n)"
      },
      {
        "solution_id": "cf_1200_C_sol_1",
        "problem_id": "cf_1200_C",
        "platform": "codeforces",
        "approach": "optimal",
        "quality": 100.0,
        "complexity": "O(n log n)"
      },
      {
        "solution_id": "cf_1500_D_sol_1",
        "problem_id": "cf_1500_D",
        "platform": "codeforces",
        "approach": "optimal",
        "quality": 100.0,
        "complexity": "O(n * m²)"
      }
    ],
    "binary_search": [
      {
        "solution_id": "cf_1200_C_sol_1",
        "problem_id": "cf_1200_C",
        "platform": "codeforces",
        "approach": "optimal",
        "quality": 100.0,
        "complexity": "O(n log n)"
      }
    ],
    "greedy": [
      {
        "solution_id": "cf_1200_C_sol_1",
        "problem_id": "cf_1200_C",
        "platform": "codeforces",
        "approach": "optimal",
        "quality": 100.0,
        "complexity": "O(n log n)"
      },
      {
        "solution_id": "cf_800_A_sol_1",
        "problem_id": "cf_800_A",
        "platform": "codeforces",
        "approach": "optimal",
        "quality": 98.0,
        "complexity": "O(n)"
      }
    ],
    "dynamic_programming": [
      {
        "solution_id": "cf_1500_D_sol_1",
        "problem_id": "cf_1500_D",
        "platform": "codeforces",
        "approach": "optimal",
        "quality": 100.0,
        "complexity": "O(n * m²)"
      }
    ],
    "state_compression": [
      {
        "solution_id": "cf_1500_D_sol_1",
        "problem_id": "cf_1500_D",
        "platform": "codeforces",
        "approach": "optimal",
        "quality": 100.0,
        "complexity": "O(n * m²)"
      }
    ],
    "ceiling_division": [
      {
        "solution_id": "cf_1_A_sol_1",
        "problem_id": "cf_1_A",
        "platform": "codeforces",
        "approach": "optimal",
        "quality": 100.0,
        "complexity": "O(1)"
      }
    ],
    "integer_arithmetic": [
      {
        "solution_id": "cf_1_A_sol_2",
        "problem_id": "cf_1_A",
        "platform": "codeforces",
        "approach": "alternative",
        "quality": 98.0,
        "complexity": "O(1)"
      }
    ],
    "parity": [
      {
        "solution_id": "cf_4_A_sol_1",
        "problem_id": "cf_4_A",
        "platform": "codeforces",
        "approach": "optimal",
        "quality": 98.0,
        "complexity": "O(1)"
      }
    ],
    "number_theory": [
      {
        "solution_id": "cf_4_A_sol_1",
        "problem_id": "cf_4_A",
        "platform": "codeforces",
        "approach": "optimal",
        "quality": 98.0,
        "complexity": "O(1)"
      }
    ],
    "strings": [
      {
        "solution_id": "cf_800_A_sol_1",
        "problem_id": "cf_800_A",
        "platform": "codeforces",
        "approach": "optimal",
        "quality": 98.0,
        "complexity": "O(n)"
      }
    ],
    "lexicographical": [
      {
        "solution_id": "cf_800_A_sol_1",
        "problem_id": "cf_800_A",
        "platform": "codeforces",
        "approach": "optimal",
        "quality": 98.0,
        "complexity": "O(n)"
      }
    ]
  },
  "data_structure_usage": {
    "hash_map": [
      "lc_1_sol_1",
      "lc_3_sol_2",
      "cf_1500_D_sol_1"
    ],
    "array": [
      "lc_1_sol_1",
      "lc_1_sol_2",
      "lc_3_sol_1",
      "lc_3_sol_2",
      "cf_1500_D_sol_1"
    ],
    "linked_list": [
      "lc_2_sol_1"
    ],
    "set": [
      "lc_3_sol_1"
    ],
    "string": [
      "cf_800_A_sol_1"
    ]
  },
  "complexity_analysis": {
    "time_complexity_distribution": {
      "O(n)": 4,
      "O(n²)": 1,
      "O(max(m, n))": 1,
      "O(n log n)": 1,
      "O(n * m²)": 1,
      "O(1)": 3
    },
    "space_complexity_distribution": {
      "O(n)": 2,
      "O(1)": 5,
      "O(max(m, n))": 1,
      "O(min(m, n))": 2,
      "O(m)": 1
    },
    "most_common_time_complexity": [
      "O(n)",
      4
    ],
    "optimization_opportunities": 1
  },
  "quality_analysis": {
    "average_quality": 97.68909878000787,
    "quality_distribution": {
      "excellent": 10,
      "good": 1,
      "acceptable": 0,
      "needs_improvement": 0
    },
    "highest_quality_solution": "lc_1_sol_1",
    "most_educational_solution": "lc_1_sol_1"
  },
  "platform_comparison": {
    "leetcode": {
      "total_solutions": 5,
      "avg_quality": 96.11601731601732,
      "avg_google_relevance": 85.4,
      "most_common_algorithms": [
        [
          "hash_map",
          2
        ],
        [
          "sliding_window",
          2
        ],
        [
          "array",
          1
        ],
        [
          "brute_force",
          1
        ],
        [
          "nested_loops",
          1
        ]
      ],
      "difficulty_range": {
        "min_implementation": 2,
        "max_implementation": 7,
        "avg_conceptual": 3.8
      }
    },
    "codeforces": {
      "total_solutions": 6,
      "avg_quality": 99.0,
      "avg_google_relevance": 79.16666666666667,
      "most_common_algorithms": [
        [
          "math",
          3
        ],
        [
          "greedy",
          2
        ],
        [
          "optimization",
          2
        ],
        [
          "binary_search",
          1
        ],
        [
          "dynamic_programming",
          1
        ]
      ],
      "difficulty_range": {
        "min_implementation": 1,
        "max_implementation": 9,
        "avg_conceptual": 4.666666666666667
      }
    }
  }
}